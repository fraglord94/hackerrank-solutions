import java.io.*;
import java.util.*;

public class Solution {
    
    public static int bin_search(int tail[] , int l, int r, int key){
        while(l < r ){
            int m = (l+r) / 2; 
            if(tail[m] >= key)
                r = m;
            else 
                l = m +1; 
        }
        return r;
    }

    public static int lis(int []a, int n){
        int tail[] = new int[n];
        int len = 1;
        tail[0] = a[0];                                
        for(int i = 1; i < n; i++){
            if(a[i] <= tail[0])
                tail[0] = a[i];
            else if(a[i] > tail[len-1]){
                tail[len] = a[i];
                len = len + 1;
            }
            else //a[i] is between the a[0] and a[len-1] we need to do binary search and then insert. 
                //problem can be better visualized with the help of nodes and pointers than arrays 
            {tail[bin_search(tail,1, len-1, a[i])] = a[i];
            }
        }
        return len; 
        
}
    
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt(); 
        int arr[] = new int[n];
        for(int i = 0; i < n; i++)
            arr[i] = s.nextInt(); 
        System.out.println(lis(arr, arr.length));
    }}
